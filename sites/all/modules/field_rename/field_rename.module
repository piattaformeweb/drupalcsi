<?php

/**
 * Implements hook_hook_info().
 */
function field_rename_hook_info() {
  $hooks['field_rename_plugin'] = array(
    'group' => 'field_rename',
  );
  $hooks['field_rename_pre_execute'] = array(
    'group' => 'field_rename',
  );
  $hooks['field_rename_execute'] = array(
    'group' => 'field_rename',
  );
  $hooks['field_rename_post_execute'] = array(
    'group' => 'field_rename',
  );
  return $hooks;
}

/**
 * Implements hook_help().
 */
function field_rename_help($path, $arg) {
  switch ($path) {
    case 'admin/help#field_rename':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("This project allows you to rename a field in the database and in <strong>Views</strong>.") . '</p>';
      if (module_exists('advanced_help_hint')) {
        $output .= advanced_help_hint_docs('field_rename', 'https://www.drupal.org/docs/7/modules/field-rename', TRUE);
      }
      else {
        $output .= t('<p>If you install and enable <a href="https://www.drupal.org/project/advanced_help_hint"><strong>Advanced Help Hint</strong></a>, you will get more help for <strong>Field Rename</strong>.</p>');
      }
      return $output;
  }
}
/**
 * Implements hook_menu().
 */
function field_rename_menu() {
    $items = array();
    $items['admin/reports/fields/rename'] = array(
        'type' => MENU_LOCAL_TASK,
        'title' => t('Rename fields'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('field_rename_admin'),
        'access callback' => 'user_access',
        'access arguments' => array('administer content types'),
        'file' => 'field_rename.admin.inc',
    );

    return $items;
}

/**
 * Returns all field rename plugins.
 */
function field_rename_get_plugins() {
    $modules = &drupal_static(__FUNCTION__);
    if (!isset($modules)) {
        // Include field_rename as the default plugin
        $modules['field_rename'] = array(
            'api' => 1,
            'name' => 'Field Rename',
        ); 

        // Get all plugins
        foreach (module_implements('field_rename_plugin') as $module) {
            $function = $module . '_field_rename_plugin';
            $info = $function();

            // Verify module information is correct
            if (!isset($info['api']) || intval($info['api']) !== 1) {
                $name = isset($info['name']) ? $info['name'] : $module_name;
                drupal_set_message('Unsupported plugin ' . $name . ': not using API version 1.');
                continue;
            }

            $modules[$module] = $info;
        }
    }

    return $modules;
}

/**
 * Implements hook_field_rename_execute().
 */
function field_rename_field_rename_execute($fields, $drop_first = FALSE) {
    field_rename_rename_fields($fields, $drop_first);
}

/**
 * Rename an array of fields.
 *
 * Adapted from code in forum_update_7003(). See also
 * zgadzaj.com/how-to-change-the-machine-name-of-a-content-field-in-
 * drupal-7.
 *
 * @param $fields
 *   Array of field names, with old names as keys and new names as values.
 * @param $drop_first
 *   Boolean: whether to drop any existing tables for the renamed fields. If
 *   you have created the renamed field already - for example, by renaming
 *   a field that was exported to Features and then reverting the feature -
 *   you may wish to set this argument to TRUE so that your data will be
 *   copied.
 */
function field_rename_rename_fields($fields, $drop_first = FALSE) {
    $error = false;

    foreach ($fields as $old_field_name => $new_field_name) {
        if (empty($old_field_name)) {
            drupal_set_message('Current field name must not be empty.', 'error');
            continue;
        }
        if (empty($new_field_name)) {
            drupal_set_message('New field name must not be empty.', 'error');
            continue;
        }
        // Read field data.
        $old_field = field_read_field($old_field_name);
        if (empty($old_field)) {
            drupal_set_message('Field "' . $old_field_name . '" does not exist.', 'error');
            continue;
        }

        // Update {field_config}.
        try {
            db_update('field_config')->fields(array('field_name' => $new_field_name))->condition('id', $old_field['id'])->execute();
        } catch (Exception $e) {
            $error = true;
            drupal_set_message('Could not update field_config table: ' . $e->getMessage(), 'error');
        }

        // Update {field_config_instance}.
        try {
            db_update('field_config_instance')->fields(array('field_name' => $new_field_name))->condition('field_id', $old_field['id'])->execute();
        } catch (Exception $e) {
            $error = true;
            drupal_set_message('Could not update field_config_instance table: ' . $e->getMessage(), 'error');
        }

        // The tables that need updating in the form 'old_name' => 'new_name'.
        $tables = array(
            'field_data_' . $old_field_name => 'field_data_' . $new_field_name,
            'field_revision_' . $old_field_name => 'field_revision_' . $new_field_name,
        );

        // Iterate through tables to be redefined and renamed.
	$semaphor = 0;
        foreach ($tables as $old_table => $new_table) {
            // Iterate through the field's columns. For example, a 'text' field will
            // have columns 'value' and 'format'.
            foreach ($old_field['columns'] as $column_name => $column_definition) {
                // Column names are in the format {field_name}_{column_name}.
                $old_column_name = $old_field_name . '_' . $column_name;
                $new_column_name = $new_field_name . '_' . $column_name;

                // If there is an index for the field, drop and then re-add it.
                $has_index = isset($old_field['indexes'][$column_name]) && ($old_field['indexes'][$column_name] == array($column_name));
                if ($has_index) {
                    try {
                        db_drop_index($old_table, $old_column_name);
                    } catch (Exception $e) {
                        $error = true;
                        drupal_set_message('Could not drop index: ' . $e->getMessage(), 'error');
                    }
                }

                // Rename the column.
                try {
                    db_change_field($old_table, $old_column_name, $new_column_name, $column_definition);
                } catch (Exception $e) {
                    $error = true;
                    drupal_set_message('Could not change field: ' . $e->getMessage(), 'error');
                }

                if ($has_index) {
                    try {
                        db_drop_index($old_table, $new_column_name);
                        db_add_index($old_table, $new_column_name, array($new_column_name));
                    } catch (Exception $e) {
                        $error = true;
                        drupal_set_message('Could not update index: ' . $e->getMessage(), 'error');
                    }
                }

                if (!$semaphor) {
		  // Prevent multiple log entries about the same change.
                  watchdog('Field Rename', 'Renamed field !old_field_name to !new_field_name.', array('!old_field_name' => $old_field_name, '!new_field_name' => $new_field_name));
		  $semaphor++;
		}
            }

            // The new table may exist e.g. due to having been included in a feature
            // that was reverted prior to this update being run. If so, we need to
            // drop the new table so that the old one can be renamed.
            if ($drop_first && db_table_exists($new_table)) {
                try {
                    db_drop_table($new_table);
                } catch (Exception $e) {
                    $error = true;
                    drupal_set_message('Could not drop table: ' . $e->getMessage(), 'error');
                }
            }

            // Rename the table.
            try {
                db_rename_table($old_table, $new_table);
            } catch (Exception $e) {
                $error = true;
                drupal_set_message('Could not rename table: ' . $e->getMessage(), 'error');
            }
        }

        if (!$error) {
            drupal_set_message(t('Renamed field !old_field_name to !new_field_name.', array('!old_field_name' => $old_field_name, '!new_field_name' => $new_field_name)));
        } else {
            drupal_set_message(t('Errors occured while renaming field !old_field_name to !new_field_name.', array('!old_field_name' => $old_field_name, '!new_field_name' => $new_field_name)), 'error');
        }
    }
}
